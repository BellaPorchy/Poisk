// ======================================================
// üß© –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
// ======================================================
import express from "express";
import bodyParser from "body-parser";
import pkg from "pg";
import cors from "cors";
import multer from "multer";
import fs from "fs";
import dotenv from "dotenv";
dotenv.config();

const { Pool } = pkg;
const app = express();
const upload = multer({ storage: multer.memoryStorage() });
const PORT = process.env.PORT || 10000;

// ======================================================
// üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
// ======================================================
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

// ======================================================
// üîê –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞ –∏–∑ .env
// ======================================================
const MASTER_KEY = process.env.MASTER_KEY || "default_master";
let keyMap = {};

try {
  keyMap = JSON.parse(process.env.API_KEYS || "{}");
  console.log("‚úÖ API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env");
} catch (e) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ API_KEYS –∏–∑ .env:", e);
}

// ======================================================
// ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express
// ======================================================
app.use(cors());
app.use(bodyParser.json());
app.use(express.urlencoded({ extended: true }));

// ======================================================
// üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
// ======================================================
(async () => {
  await pool.query(`
    CREATE TABLE IF NOT EXISTS ids (
      id TEXT PRIMARY KEY,
      user_name TEXT,
      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      note TEXT DEFAULT ''
    )
  `);
  console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'ids' –≥–æ—Ç–æ–≤–∞");
})();

// ======================================================
// üß† –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
// ======================================================
function getUserByKey(key) {
  return keyMap[key] || null;
}

// ======================================================
// üì© –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ID
// ======================================================
app.post("/api/add", async (req, res) => {
  const { id, key } = req.body;
  const user = getUserByKey(key);
  if (!user) return res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á" });

  try {
    await pool.query(
      "INSERT INTO ids (id, user_name) VALUES ($1, $2) ON CONFLICT (id) DO NOTHING",
      [id, user]
    );
    res.json({ success: true, user });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ID:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================================================
// üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
// ======================================================
app.get("/api/list-full", async (_, res) => {
  try {
    const result = await pool.query("SELECT * FROM ids ORDER BY created_at DESC");
    res.json(result.rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================================================
// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
// ======================================================
app.post("/api/delete", async (req, res) => {
  const { ids, masterKey } = req.body;
  if (masterKey !== MASTER_KEY) return res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª—é—á" });

  try {
    await pool.query("DELETE FROM ids WHERE id = ANY($1)", [ids]);
    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================================================
// üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
// ======================================================
app.post("/api/note", async (req, res) => {
  const { id, note } = req.body;
  try {
    await pool.query("UPDATE ids SET note = $1 WHERE id = $2", [note, id]);
    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================================================
// üì¶ –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ —Ñ–∞–π–ª (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–æ–º)
// ======================================================
app.post("/api/import", upload.single("file"), async (req, res) => {
  const { masterKey } = req.body;
  if (masterKey !== MASTER_KEY) return res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –º–∞—Å—Ç–µ—Ä –∫–ª—é—á" });

  try {
    const data = JSON.parse(req.file.buffer.toString());
    for (const item of data) {
      await pool.query(
        "INSERT INTO ids (id, user_name, note) VALUES ($1, $2, $3) ON CONFLICT (id) DO NOTHING",
        [item.id, item.user_name || "–ò–º–ø–æ—Ä—Ç", item.note || ""]
      );
    }
    res.json({ success: true });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞" });
  }
});

// ======================================================
// üßæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
// ======================================================
app.get("/api/export", async (_, res) => {
  try {
    const result = await pool.query("SELECT * FROM ids ORDER BY created_at DESC");
    res.json(result.rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ======================================================
// üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ç–∞–±–ª–∏—Ü–∞ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏ –¥–∏–∑–∞–π–Ω–æ–º)
// ======================================================
app.get("/", async (_, res) => {
  const result = await pool.query("SELECT * FROM ids ORDER BY created_at DESC");
  const rows = result.rows;

  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8" />
      <title>ID Tracker</title>
      <style>
        body { font-family: system-ui; background: #f9fafb; padding: 20px; }
        h1 { text-align: center; color: #333; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; background: white; box-shadow: 0 2px 6px rgba(0,0,0,0.1); border-radius: 10px; overflow: hidden; }
        th, td { padding: 10px; border-bottom: 1px solid #eee; text-align: left; }
        tr:hover { background: #f1f5f9; }
        input.note { width: 100%; border: none; background: #f8fafc; padding: 6px; border-radius: 4px; }
        .controls { margin-bottom: 20px; text-align: center; }
        button { margin: 5px; padding: 10px 15px; border: none; border-radius: 6px; cursor: pointer; background: #2563eb; color: white; }
        button:hover { background: #1d4ed8; }
      </style>
    </head>
    <body>
      <h1>üìã –°–ø–∏—Å–æ–∫ ID</h1>
      <div class="controls">
        <input type="password" id="masterKey" placeholder="–ú–∞—Å—Ç–µ—Ä –∫–ª—é—á">
        <button onclick="deleteSelected()">üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>
        <button onclick="exportData()">‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç</button>
        <input type="file" id="importFile" accept=".json">
        <button onclick="importData()">‚¨ÜÔ∏è –ò–º–ø–æ—Ä—Ç</button>
      </div>
      <table id="table">
        <thead>
          <tr><th></th><th>ID</th><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–î–∞—Ç–∞</th><th>–ó–∞–º–µ—Ç–∫–∞</th></tr>
        </thead>
        <tbody>
          ${rows
            .map(
              (x) => `
              <tr data-id="${x.id}">
                <td><input type="checkbox" class="chk"></td>
                <td>${x.id}</td>
                <td>${x.user_name}</td>
                <td>${new Date(x.created_at).toLocaleString()}</td>
                <td><input class="note" value="${x.note || ""}" onchange="saveNote('${x.id}', this.value)"></td>
              </tr>`
            )
            .join("")}
        </tbody>
      </table>

      <script>
        async function refresh() {
          const res = await fetch("/api/list-full");
          const data = await res.json();
          const checked = Array.from(document.querySelectorAll('.chk'))
            .filter(c => c.checked)
            .map(c => c.closest('tr').dataset.id);
          const tbody = document.querySelector("#table tbody");
          tbody.innerHTML = data.map(x => \`
            <tr data-id="\${x.id}">
              <td><input type="checkbox" class="chk" \${checked.includes(x.id) ? "checked" : ""}></td>
              <td>\${x.id}</td>
              <td>\${x.user_name}</td>
              <td>\${new Date(x.created_at).toLocaleString()}</td>
              <td><input class="note" value="\${x.note || ""}" onchange="saveNote('\${x.id}', this.value)"></td>
            </tr>\`).join("");
        }
        setInterval(refresh, 2000);

        async function deleteSelected() {
          const ids = Array.from(document.querySelectorAll('.chk:checked')).map(c => c.closest('tr').dataset.id);
          const masterKey = document.querySelector('#masterKey').value.trim();
          if (!ids.length) return alert("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ");
          const res = await fetch("/api/delete", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ ids, masterKey })
          });
          const r = await res.json();
          if (r.success) refresh();
          else alert(r.error || "–û—à–∏–±–∫–∞");
        }

        async function saveNote(id, note) {
          await fetch("/api/note", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ id, note })
          });
        }

        async function exportData() {
          const res = await fetch("/api/export");
          const data = await res.json();
          const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" });
          const a = document.createElement("a");
          a.href = URL.createObjectURL(blob);
          a.download = "ids_export.json";
          a.click();
        }

        async function importData() {
          const fileInput = document.querySelector('#importFile');
          const masterKey = document.querySelector('#masterKey').value.trim();
          if (!fileInput.files.length) return alert("–í—ã–±–µ—Ä–∏ —Ñ–∞–π–ª");
          const form = new FormData();
          form.append("file", fileInput.files[0]);
          form.append("masterKey", masterKey);
          const res = await fetch("/api/import", { method: "POST", body: form });
          const r = await res.json();
          if (r.success) refresh();
          else alert(r.error || "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞");
        }
      </script>
    </body>
    </html>
  `);
});

// ======================================================
// üèÅ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ======================================================
app.listen(PORT, () => console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
