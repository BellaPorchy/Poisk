import express from "express";
import cors from "cors";
import pkg from "pg";
import multer from "multer";
import dotenv from "dotenv";

dotenv.config();
const { Pool } = pkg;
const app = express();
app.use(cors());
app.use(express.json());
const upload = multer({ storage: multer.memoryStorage() });

// === –ö–õ–Æ–ß–ò ===
let keys = [];
if (process.env.USER_KEYS) {
  try {
    const parsed = JSON.parse(process.env.USER_KEYS);
    if (parsed && Array.isArray(parsed.keys)) {
      keys = parsed.keys;
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${keys.length} API-–∫–ª—é—á–µ–π –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ USER_KEYS:", err);
  }
} else {
  console.warn("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è USER_KEYS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
}

// === –ú–ê–°–¢–ï–† –ö–õ–Æ–ß ===
const MASTER_KEY = process.env.MASTER_KEY || "default-master";

// === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶–´ ===
await pool.query(`
  CREATE TABLE IF NOT EXISTS ids (
    id TEXT PRIMARY KEY,
    added_by TEXT,
    note TEXT DEFAULT '',
    created_at TIMESTAMP DEFAULT NOW()
  );
`);
console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞");

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
const findUserByKey = (key) => {
  const found = keys.find((x) => x.key === key);
  return found ? found.user : key;
};

// === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===
app.get("/", async (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
<meta charset="UTF-8" />
<title>ID Manager</title>
<style>
  body { font-family: system-ui, sans-serif; background:#f8fafc; padding:20px; color:#111; }
  table { width:100%; border-collapse:collapse; background:white; box-shadow:0 1px 3px rgba(0,0,0,0.1); }
  th, td { padding:4px 6px; border-bottom:1px solid #ddd; }
  th { background:#e0f0ff; text-align:left; }
  tr:hover { background:#f1f5f9; }
  input[type="text"] { padding:6px; width:250px; margin-bottom:10px; }
  button { margin:4px; padding:6px 10px; border:1px solid #ccc; border-radius:4px; cursor:pointer; }
  button:hover { background:#e5f0ff; }
  textarea { width:100%; height:40px; }
  .note { font-size:12px; color:#444; }
  #toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background: #22c55e;
    color: white;
    padding: 10px 16px;
    border-radius: 8px;
    opacity: 0;
    transition: opacity 0.5s;
    pointer-events: none;
    font-size: 14px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.15);
  }
</style>
</head>
<body>
  <h2>üß© ID Manager</h2>
  <div>
    <input id="filter" placeholder="–§–∏–ª—å—Ç—Ä –ø–æ ID –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é">
    <button onclick="refresh()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
    <button onclick="deleteSelected()">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ</button>
    <button onclick="exportData()">üì§ –≠–∫—Å–ø–æ—Ä—Ç</button>
    <button onclick="document.getElementById('importFile').click()">üì• –ò–º–ø–æ—Ä—Ç</button>
    <input type="file" id="importFile" accept=".json" style="display:none">
  </div>
  <table id="idTable">
    <thead>
      <tr>
        <th></th>
        <th>ID</th>
        <th>–î–æ–±–∞–≤–∏–ª</th>
        <th>–ö–æ–≥–¥–∞</th>
        <th>–ó–∞–º–µ—Ç–∫–∞</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div id="toast"></div>

<script>
/* 
  –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å –º–∞—Å—Ç–µ—Ä–∫–µ–π –ù–ï –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
  –ó–∞–ø—Ä–æ—Å –ø–æ—è–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
*/

let selected = new Set();

function showToast(text, color="#22c55e") {
  const t = document.getElementById("toast");
  t.style.background = color;
  t.textContent = text;
  t.style.opacity = "1";
  setTimeout(() => (t.style.opacity = "0"), 2500);
}

function getMasterKeyOrAsk() {
  // –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ localStorage
  let k = localStorage.getItem("master_key");
  if (k && k.trim()) return k.trim();

  // —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
  const entered = prompt("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π):");
  if (entered && entered.trim()) {
    localStorage.setItem("master_key", entered.trim());
    return entered.trim();
  }
  return null;
}

document.getElementById("filter").addEventListener("input", render);

// –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–Ω–¥–µ—Ä (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
async function load() {
  try {
    const res = await fetch("/api/list-full");
    const data = await res.json();
    window.items = data.items;
    render(false);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞:", err);
    showToast("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫", "#ef4444");
  }
}

function render(clearSelection = false) {
  const filter = document.getElementById("filter").value.toLowerCase();
  const tbody = document.querySelector("#idTable tbody");
  const prevSelected = new Set(selected);

  if (clearSelection) selected.clear();

  tbody.innerHTML = "";
  (window.items||[])
    .filter(x => x.id.toLowerCase().includes(filter) || (x.added_by||"").toLowerCase().includes(filter))
    .forEach(x => {
      const tr = document.createElement("tr");
      const checked = prevSelected.has(x.id) ? "checked" : "";
      tr.innerHTML = \`
        <td><input type="checkbox" class="chk" data-id="\${x.id}" \${checked}></td>
        <td>\${x.id}</td>
        <td>\${x.added_by}</td>
        <td>\${new Date(x.created_at).toLocaleString()}</td>
        <td><textarea data-id="\${x.id}">\${x.note || ""}</textarea></td>
      \`;
      tbody.appendChild(tr);
    });

  // —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞–º–∏)
  document.querySelectorAll(".chk").forEach(c =>
    c.addEventListener("change", e => {
      const id = e.target.dataset.id;
      if (e.target.checked) selected.add(id);
      else selected.delete(id);
    })
  );

  // —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–∫–µ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç)
  document.querySelectorAll("textarea").forEach(a =>
    a.addEventListener("change", async e => {
      const id = e.target.dataset.id;
      const note = e.target.value;
      const masterKey = getMasterKeyOrAsk();
      if (!masterKey) {
        showToast("‚ùó –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∑–∞–º–µ—Ç–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", "#ef4444");
        // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –ª–æ–∂–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        load();
        return;
      }
      try {
        const r = await fetch("/api/note", {
          method:"POST",
          headers:{"Content-Type":"application/json"},
          body:JSON.stringify({ id, note, masterKey })
        });
        const j = await r.json();
        if (r.ok && j.success) showToast("üíæ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞");
        else {
          showToast("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "#ef4444");
        }
      } catch (err) {
        console.error(err);
        showToast("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", "#ef4444");
      }
    })
  );
}

async function deleteSelected() {
  const ids = [...selected];
  if (ids.length === 0) {
    showToast("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ", "#ef4444");
    return;
  }
  if (!confirm(\`–£–¥–∞–ª–∏—Ç—å \${ids.length} –∑–∞–ø–∏—Å–µ–π?\`)) return;

  const masterKey = getMasterKeyOrAsk();
  if (!masterKey) { showToast("‚ùó –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω", "#ef4444"); return; }

  try {
    const r = await fetch("/api/delete-multiple", {
      method:"POST",
      headers:{"Content-Type":"application/json"},
      body:JSON.stringify({ ids, masterKey })
    });
    const j = await r.json();
    if (r.ok && j.success) {
      showToast("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ " + ids.length);
      selected.clear();
      load();
    } else {
      showToast("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", "#ef4444");
    }
  } catch (err) {
    console.error(err);
    showToast("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", "#ef4444");
  }
}

async function exportData() {
  try {
    const res = await fetch("/api/export");
    const blob = await res.blob();
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "ids_export.json";
    a.click();
    showToast("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω");
  } catch (err) {
    console.error(err);
    showToast("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", "#ef4444");
  }
}

document.getElementById("importFile").addEventListener("change", async e => {
  const file = e.target.files[0];
  if (!file) return;
  const masterKey = getMasterKeyOrAsk();
  if (!masterKey) { showToast("‚ùó –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω", "#ef4444"); return; }

  const formData = new FormData();
  formData.append("file", file);
  formData.append("masterKey", masterKey);

  try {
    const r = await fetch("/api/import", { method:"POST", body:formData });
    const j = await r.json();
    if (r.ok && j.success) {
      showToast("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ " + (j.count || 0) + " ID");
      load();
    } else {
      showToast("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", "#ef4444");
    }
  } catch (err) {
    console.error(err);
    showToast("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞", "#ef4444");
  }
});

function refresh(){ load(); }
setInterval(load, 2000);
load();
</script>
</body>
</html>
`);
});

// === API ===
app.get("/api/list-full", async (req, res) => {
  const q = await pool.query("SELECT * FROM ids ORDER BY created_at DESC");
  res.json({ items: q.rows });
});

app.post("/api/add-id", async (req, res) => {
  const { id, apiKey } = req.body;
  if (!id || !apiKey) return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  const user = findUserByKey(apiKey);
  await pool.query(
    "INSERT INTO ids (id, added_by) VALUES ($1, $2) ON CONFLICT (id) DO NOTHING",
    [id, user]
  );
  res.json({ success: true });
});

app.post("/api/note", async (req, res) => {
  const { id, note, masterKey } = req.body;
  if (masterKey !== MASTER_KEY) return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
  await pool.query("UPDATE ids SET note=$1 WHERE id=$2", [note, id]);
  res.json({ success: true });
});

app.post("/api/delete-multiple", async (req, res) => {
  const { ids, masterKey } = req.body;
  if (masterKey !== MASTER_KEY) return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });
  await pool.query("DELETE FROM ids WHERE id = ANY($1::text[])", [ids]);
  res.json({ success: true });
});

app.get("/api/export", async (req, res) => {
  const q = await pool.query("SELECT * FROM ids");
  res.setHeader("Content-Disposition", "attachment; filename=ids_export.json");
  res.json({ items: q.rows });
});

// –ò–º–ø–æ—Ä—Ç
// –ò–º–ø–æ—Ä—Ç
app.post("/api/import", upload.single("file"), async (req, res) => {
  const { masterKey } = req.body;
  if (masterKey !== MASTER_KEY) return res.status(403).json({ error: "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞" });

  try {
    const fileText = req.file.buffer.toString();
    let fileData = JSON.parse(fileText);

    // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if (fileData.items && Array.isArray(fileData.items)) {
      fileData = fileData.items;
    } else if (!Array.isArray(fileData)) {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞" });
    }

    let inserted = 0;
    for (const row of fileData) {
      if (!row.id) continue;
      await pool.query(
        "INSERT INTO ids (id, added_by, note, created_at) VALUES ($1,$2,$3,$4) ON CONFLICT (id) DO NOTHING",
        [row.id, row.added_by || "–ò–º–ø–æ—Ä—Ç", row.note || "", row.created_at || new Date()]
      );
      inserted++;
    }

    console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${inserted} –∑–∞–ø–∏—Å–µ–π`);
    res.json({ success: true, inserted });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞" });
  }
});


// === –ó–ê–ü–£–°–ö ===
app.listen(process.env.PORT || 10000, () =>
  console.log("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
);
